{% extends 'base_login.html.twig' %}
{% block title %}
	{{ candidate.id ? "Mettre à jour" : "Inscription" }}
	du candidat
{% endblock %}
{% block body %}
	<meta name="csrf-token" content="{{ csrf_token('authenticate') }}"/>
	<style>
		.form-input {
			@apply w-full px-4 py-3 border border-gray-300 rounded-lg focus: ring-2 focus: ring-main-green focus: border-main-green transition duration-150 ease-in-out placeholder: text-sm;
		}

		.form-label {
			@apply block text-sm font-medium text-gray-700 mb-2;
		}

		.btn-primary {
			@apply w-full flex justify-center items-center px-6 py-3 border border-transparent text-base font-medium rounded-md text-white bg-main-green hover: bg-green-700 focus: outline-none focus: ring-2 focus: ring-offset-2 focus: ring-main-green transition duration-150 ease-in-out;
		}

		.form-step {
			@apply bg-white rounded-lg shadow-md p-8 mb-8;
		}

		.step-indicator {
			@apply w-10 h-10 flex items-center justify-center rounded-full text-sm font-semibold transition-all duration-300 ease-in-out;
		}

		.step-indicator.active {
			@apply bg-main-green text-white;
		}

		.step-indicator.completed {
			@apply bg-green-200 text-main-green;
		}

		.help-tooltip {
			@apply absolute top-0 right-0 mt-1 mr-1 text-gray-400 hover: text-gray-600 cursor-pointer transition duration-150 ease-in-out;
		}

		.btn-primary,
		.btn-secondary,
		.btn-success {
			@apply px-6 py-3 border border-transparent text-lg font-semibold rounded-md focus: outline-none focus: ring-2 focus: ring-offset-2 transition duration-150 ease-in-out;
		}

		.btn-primary {
			@apply text-white bg-main-green hover: bg-green-700 focus: ring-main-green;
		}

		.btn-secondary {
			@apply text-main-green bg-white border-main-green hover: bg-green-50 focus: ring-main-green;
		}

		.btn-success {
			@apply text-white bg-green-600 hover: bg-green-700 focus: ring-green-500;
		}

		#popup {
			position: fixed;
			top: 0;
			left: 0;
			right: 0;
			z-index: 50;
			transform: translateY(-100%);
			transition: transform 0.3s ease-in-out;
		}

		#popup.show {
			transform: translateY(0);
		}

		@keyframes fadeIn {
			from {
				opacity: 0;
				transform: translateY(-10px);
			}

			to {
				opacity: 1;
				transform: translateY(0);
			}
		}

		/* New styles for button layout */
		.form-buttons {
			display: flex;
			justify-content: space-between;
			width: 100%;
			margin-top: 2rem;
		}

		.form-buttons button {
			flex-basis: 30%;
			padding: 0.75rem 1.5rem;
			border-radius: 0.375rem;
			font-weight: 600;
			transition: all 0.15s ease-in-out;
		}

		.form-buttons button:hover {
			transform: translateY(-1px);
			box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
		}

		.form-buttons button:disabled {
			opacity: 0.5;
			cursor: not-allowed;
		}

		.required-asterisk {
			color: red;
		}
	</style>
	<!-- Popup for flash messages -->
<div id="popup" class="fixed z-50 top-0 left-0 right-0 p-4 transform -translate-y-full transition-transform duration-300 ease-in-out">
  <div class="max-w-md mx-auto bg-white border-l-4 rounded-lg shadow-lg overflow-hidden flex items-center">
    <div id="popup-icon" class="flex-shrink-0 p-4">
      <!-- Icons will be inserted dynamically via JavaScript -->
    </div>
    <div class="flex-grow p-4">
      <p id="popup-message" class="text-md font-medium"></p>
    </div>
    <button id="close-popup" class="p-4 text-gray-400 hover:text-gray-600 focus:outline-none">
      <svg class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
      </svg>
    </button>
  </div>
</div>

	<div class="min-h-screen bg-gradient-to-br from-green-50 to-blue-50 py-12 px-4 sm:px-6 lg:px-8">
		<div class="max-w-5xl mx-auto">
			<div class="text-center mb-12 mt-20">
				<h1 class="text-5xl font-extrabold text-gray-900 mb-4 animate-fade-in">
					{{ candidate.id ? 'candidate_form.Maj'| trans : 'candidate_form.Inscription'| trans }}
				</h1>
				<p class="text-xl text-gray-600">
					{{ "candidate_form.description" | trans }}
				</p>
			</div>

			{% for label, messages in app.flashes %}
				{% for message in messages %}
					<div class="flash-message mb-4 hidden" data-type="{{ label }}">
						{{ message | raw }}
					</div>
				{% endfor %}
			{% endfor %}

			<div class="bg-white shadow-xl rounded-lg overflow-hidden">
				<div class="p-8">
					<div class="flex justify-between items-center mb-8">
						<div class="flex-1 flex justify-start">
							<div class="flex space-x-4">
								<div id="step-indicator-1" class="step-indicator active">1</div>
								<div id="step-indicator-2" class="step-indicator">2</div>
								<div id="step-indicator-3" class="step-indicator">3</div>
								<div id="step-indicator-4" class="step-indicator">4</div>
								<div id="step-indicator-5" class="step-indicator">5</div>
								<div id="step-indicator-6" class="step-indicator">6</div>
							</div>
						</div>
						<button id="help-button" class="text-main-green hover:text-green-700 font-medium flex items-center">
							<svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewbox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.228 9c.549-1.165 2.03-2 3.772-2 2.21 0 4 1.343 4 3 0 1.4-1.278 2.575-3.006 2.907-.542.104-.994.54-.994 1.093m0 3h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
							</svg>
							{{ "candidate_form.Need help?" | trans }}
						</button>
					</div>

					{% if not isEditable %}
						<div class="alert alert-warning">
							The 3-day edit window has expired. You can no longer modify your
																					          information.
						</div>
					{% endif %}

					{{ form_start(form, {'attr': {'class': 'space-y-8', 'id': 'multi-step-form'
        }}) }}
					{{ form_widget(form._token) }}

					{# Étape 1: Informations de paiement #}
					<div id="step1" class="form-step">
						<h3 class="text-2xl font-semibold mb-6 text-main-green">
							{{ "candidate_form.step1_title.Étape 1" | trans }}
						</h3>
						<div class="space-y-6">
							<div class="form-group relative">
								{{ form_label(form.transactionNumber,
              'candidate_form.transaction_number'|trans ~ '
              <span class="required-asterisk">*</span>', {'label_attr':
              {'class': 'form-label'}, 'label_html': true}) }}
								{{ form_widget(form.transactionNumber, {'attr': {'class': 'form-input placeholder-gray-500
							text-sm', 'placeholder': 'candidate_form.transaction_number_placeholder' | trans,
							'required': 'required'
              }}) }}
								<i class="fas fa-info-circle help-tooltip" title="{{ 'candidate_form.transaction_number_help' | trans }}"></i>
								{% if form.transactionNumber.vars.errors|length > 0 %}
									<div class="text-red-500 text-xs mt-1">
										{{ form_errors(form.transactionNumber) }}
									</div>
								{% endif %}
							</div>
							<div class="form-group relative">
								{{ form_label(form.paymentOperator,
              'candidate_form.payment_receipt'|trans ~ '
              <span class="required-asterisk">*</span>', {'label_attr':
              {'class': 'form-label'}, 'label_html': true}) }}

								{{ form_widget(form.paymentOperator, {'attr': {'class': 'form-input placeholder-gray-500
							text-sm', 'placeholder': 'candidate_form.transaction_photo_placeholder' | trans, 'required':
							'required'
              }}) }}
								<i class="fas fa-info-circle help-tooltip" title="{{ 'candidate_form.paymentOperator_help' | trans }}"></i>
								{{ form_errors(form.paymentOperator, {'attr': {'class': 'text-red-500 text-xs mt-1'
              }}) }}
							</div>
						</div>
					</div>

					{# Étape 2.1: Informations personnelles #}
					<div id="step2" class="form-step hidden">
						<h3 class="text-2xl font-semibold mb-6 text-main-green">
							{{ "candidate_form.step2_title.Étape 2" | trans }}
						</h3>
						<div class="grid grid-cols-1 md:grid-cols-2 gap-6">
							{% for field in ['name', 'sexe', 'dateOfBirth', 'placeOfBirth',
            'birthCertificate', 'photo'] %}
								<div class="form-group relative">
									{{ form_label(form[field], ('candidate_form.'~field) | trans ~ '
              <span class="required-asterisk">*</span>', {'label_attr':
              {'class': 'form-label'}, 'label_html': true}) }}
									{% if field in
              ['photo', 'birthCertificate'] %}
										<div class="image-upload-container">
											{{ form_widget(form[field], {'attr': {'class': 'form-input placeholder-gray-500 text-sm
								image-upload', 'required': 'required', 'placeholder':
								('candidate_form.'~field~'_placeholder') | trans
                }}) }}
											<img id="{{ field }}-preview" src="#" alt="{{ field }} preview" style="
																																	                    display: none;
																																	                    max-width: 100px;
																																	                    max-height: 100px;
																																	                    margin-top: 10px;
																																	                  "/>
										</div>
									{% elseif field == 'dateOfBirth' %}
										<div class="date-input-wrapper relative">
											{{ form_widget(form[field], {'attr': {
												'class': 'form-input placeholder-gray-500 text-sm js-datepicker pr-10',
												'required': 'required',
												'placeholder': ('candidate_form.'~field~'_placeholder') | trans

                }}) }}
											<span class="calendar-icon absolute right-3 top-1/2 transform -translate-y-1/2 pointer-events-none">
												<svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 24 24" width="20" height="20">
													<path fill="none" stroke="#4CAF50" stroke-width="2" d="M3 6v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V6m-18 0a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2m-18 0h18M8 2v4m8-4v4M7 11h10M7 15h10M7 19h10"/>
												</svg>
											</span>
										</div>
									{% else %}
										{{ form_widget(form[field], {'attr': {
										'class': 'form-input placeholder-gray-500 text-sm',
										'required': 'required',
										'placeholder': ('candidate_form.'~field~'_placeholder') | trans

              }}) }}
									{% endif %}
									<i class="fas fa-info-circle help-tooltip" title="{{ ('candidate_form.'~field~'_help') | trans }}"></i>
									{{ form_errors(form[field], {'attr': {'class': 'text-red-500 text-xs mt-1'
              }}) }}
								</div>
							{% endfor %}
						</div>
					</div>

					{#<!-- 'photo' -->#}
					{# Étape 2.2: Informations personnelles #}
					<div id="step3" class="form-step hidden">
						<h3 class="text-2xl font-semibold mb-6 text-main-green">
							{{ "candidate_form.step2_title.Étape 2" | trans }}
						</h3>
						<div class="grid grid-cols-1 md:grid-cols-2 gap-6">
							{% for field in ['nationality', 'region', 'depertement', 'cni',
            'cniIssueDate', 'phoneNumber'] %}
								<div class="form-group relative">
									{{ form_label(form[field], ('candidate_form.'~field) | trans ~ '
              <span class="required-asterisk">*</span>', {'label_attr':
              {'class': 'form-label'}, 'label_html': true}) }}
									{% if field in
              ['photo', 'birthCertificate'] %}
										<div class="image-upload-container">
											{{ form_widget(form[field], {'attr': {'class': 'form-input placeholder-gray-500 text-sm image-upload', 'required': 'required', 'placeholder': ('candidate_form.'~field~'_placeholder') | trans
                }}) }}
											<img id="{{ field }}-preview" src="#" alt="{{ field }} preview" style="
																																	                    display: none;
																																	                    max-width: 100px;
																																	                    max-height: 100px;
																																	                    margin-top: 10px;
																																	                  "/>
										</div>
									{% elseif field == 'cniIssueDate' %}
										<div class="date-input-wrapper relative">
											{{ form_widget(form[field], {'attr': {
												'class': 'form-input placeholder-gray-500 text-sm js-datepicker pr-10',
												'required': 'required',
												'placeholder': ('candidate_form.'~field~'_placeholder') | trans

                }}) }}
											<span class="calendar-icon absolute right-3 top-1/2 transform -translate-y-1/2 pointer-events-none">
												<svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 24 24" width="20" height="20">
													<path fill="none" stroke="#4CAF50" stroke-width="2" d="M3 6v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V6m-18 0a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2m-18 0h18M8 2v4m8-4v4M7 11h10M7 15h10M7 19h10"/>
												</svg>
											</span>
										</div>
									{% else %}
										{{ form_widget(form[field], {'attr': {'class': 'form-input placeholder-gray-500 text-sm', 'required': 'required', 'placeholder': ('candidate_form.'~field~'_placeholder') | trans
              }}) }}
									{% endif %}
									<i class="fas fa-info-circle help-tooltip" title="{{ ('candidate_form.'~field~'_help') | trans }}"></i>
									{{ form_errors(form[field], {'attr': {'class': 'text-red-500 text-xs mt-1'
              }}) }}
								</div>
							{% endfor %}
						</div>
					</div>

					{# Étape 3.1: Autres informations #}
					<div id="step4" class="form-step hidden">
						<h3 class="text-2xl font-semibold mb-6 text-main-green">
							{{ "candidate_form.step3_title.Étape 4" | trans }}
						</h3>
						<div class="grid grid-cols-1 md:grid-cols-2 gap-6">
							{% for field in ['secondaryEducationStartYear',
            'secondaryEducationEndYear', 'secondCycleStudyType',
            'educationSubsystem'] %}
								<div class="form-group relative">
									{{ form_label(form[field], ('candidate_form.'~field) | trans ~ '
              <span class="required-asterisk">*</span>', {'label_attr':
              {'class': 'form-label'}, 'label_html': true}) }}
									{% if field in
              ['secondaryEducationStartYear', 'secondaryEducationEndYear'] %}
										{{ form_widget(form[field], {'attr': {
											'class': 'form-select form-input placeholder-gray-500 text-sm education-year-select',
											'required': 'required',
											'placeholder': ('candidate_form.'~field~'_placeholder') | trans,
											'data-year-field': field

              }}) }}
										<div id="year-gap-error" class="text-red-500 text-sm mt-4" style="display: none">
											{{ "candidate_form.year_gap_error" | trans }}
										</div>
									{% else %}
										{{ form_widget(form[field], {'attr': {
											'class': 'form-input placeholder-gray-500 text-sm',
											'required': 'required',
											'placeholder': ('candidate_form.'~field~'_placeholder') | trans

              }}) }}
									{% endif %}
									<i class="fas fa-info-circle help-tooltip" title="{{ ('candidate_form.'~field~'_help') | trans }}"></i>
									{{ form_errors(form[field], {'attr': {'class': 'text-red-500 text-xs mt-1'
              }}) }}
								</div>
							{% endfor %}
						</div>
					</div>

					{# Étape 3.2: Autres informations #}
					<div id="step5" class="form-step hidden">
						<h3 id="step5-heading" class="text-2xl font-semibold mb-6 text-main-green">
							{{ "candidate_form.step3_title.Étape 4" | trans }}
						</h3>

						{# Common fields #}
						<div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
							{% for field in ['certificate'] %}
								<div class="form-group relative">
									{{ form_label(form[field], ('candidate_form.'~field) | trans ~ '
              <span class="required-asterisk">*</span>', {'label_attr':
              {'class': 'form-label'}, 'label_html': true}) }}
									{% if field ==
              'certificate' %}
										<div class="image-upload-container">
											{{ form_widget(form[field], {'attr': {'class': 'form-input placeholder-gray-500 text-sm
								image-upload', 'required': 'required', 'placeholder':
								('candidate_form.'~field~'_placeholder') | trans
                }}) }}
											<img id="{{ field }}-preview" src="#" alt="{{ field }} preview" style="
																																	                    display: none;
																																	                    max-width: 100px;
																																	                    max-height: 100px;
																																	                    margin-top: 10px;
																																	                  "/>
										</div>
									{% else %}
										{{ form_widget(form[field], {'attr': {'class': 'form-input placeholder-gray-500 text-sm',
							'required': 'required', 'placeholder': ('candidate_form.'~field~'_placeholder') | trans
              }}) }}
									{% endif %}
									<i class="fas fa-info-circle help-tooltip" title="{{ ('candidate_form.'~field~'_help') | trans }}"></i>
									{{ form_errors(form[field], {'attr': {'class': 'text-red-500 text-xs mt-1'
              }}) }}
								</div>
							{% endfor %}
						</div>

						{# Francophone subsection #}
						<div
							id="francophone-fields" class="subsection mb-8">
	
							<div class="grid grid-cols-1 md:grid-cols-2 gap-6">
								{% for field in [ 'certificateYearBAC','baccalaureateCountry',
              'baccalaureateSeries', 'baccalaureateMention', 'probatoireYear']
              %}
									<div class="form-group relative">
										{{ form_label(form[field], ('candidate_form.'~field) | trans ~ '
                <span class="required-asterisk">*</span>', {'label_attr':
                {'class': 'form-label'}, 'label_html': true}) }}

										{{ form_widget(form[field], {'attr': {'class': 'form-input placeholder-gray-500
								text-sm', 'required': 'required', 'placeholder':
								('candidate_form.'~field~'_placeholder') | trans
                }}) }}
										<i class="fas fa-info-circle help-tooltip" title="{{ ('candidate_form.'~field~'_help') | trans }}"></i>
										{{ form_errors(form[field], {'attr': {'class': 'text-red-500 text-xs mt-1'
                }}) }}
									</div>
								{% endfor %}
							</div>
						</div>

						{# Anglophone subsection #}
						<div
							id="anglophone-fields" class="subsection">
						
							<div class="grid grid-cols-1 md:grid-cols-2 gap-6">
								{% for field in [ 'certificateYearGCE','gceALevelCountry',
              'gceALevelPapersCount', 'gceALevelGradeACount', 'gceOLevelYear',
              'gceOLevelPapersCount'] %}
									<div class="form-group relative">
										{{ form_label(form[field], ('candidate_form.'~field) | trans ~ '
                <span class="required-asterisk">*</span>', {'label_attr':
                {'class': 'form-label'}, 'label_html': true}) }}

										{{ form_widget(form[field], {'attr': {'class': 'form-input placeholder-gray-500
								text-sm', 'required': 'required', 'placeholder':
								('candidate_form.'~field~'_placeholder') | trans
                }}) }}
										<i class="fas fa-info-circle help-tooltip" title="{{ ('candidate_form.'~field~'_help') | trans }}"></i>
										{{ form_errors(form[field], {'attr': {'class': 'text-red-500 text-xs mt-1'
                }}) }}
									</div>
								{% endfor %}
							</div>
						</div>
					</div>

					{# Étape 3.3: Autres informations #}
					<div
						id="step6" class="form-step hidden">
						
	            <h3 class="text-2xl font-semibold mb-6 text-main-green">
						   {{ "candidate_form.step3_title.Étape 6" | trans }}
									</h3>
																		  
						<div class="grid grid-cols-1 md:grid-cols-2 gap-6">
							{% for field in ['field','examinationCenter', 'language'] %}
								<div class="form-group relative">
									{{ form_label(form[field], ('candidate_form.'~field) | trans ~ '
              <span class="required-asterisk">*</span>', {'label_attr':
              {'class': 'form-label'}, 'label_html': true}) }}

									{{ form_widget(form[field], {'attr': {'class': 'form-input placeholder-gray-500 text-sm',
							'required': 'required', 'placeholder': ('candidate_form.'~field~'_placeholder') | trans
              }}) }}
									<i class="fas fa-info-circle help-tooltip" title="{{ ('candidate_form.'~field~'_help') | trans }}"></i>
									{{ form_errors(form[field], {'attr': {'class': 'text-red-500 text-xs mt-1'
              }}) }}
								</div>
							{% endfor %}
						</div>
					</div>

					<div class="form-buttons">
						<button type="button" id="prev-button" class="btn-secondary font-semibold hidden">
							<svg class="w-5 h-5 mr-2 inline" fill="none" stroke="currentColor" viewbox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
							</svg>
							{{ "candidate_form.previous" | trans }}
						</button>
						<button type="button" id="next-button" class="btn-primary hidden">
							{{ "candidate_form.next" | trans }}
							<svg class="w-5 h-5 ml-2 inline" fill="none" stroke="currentColor" viewbox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
							</svg>
						</button>
						<button type="submit" id="submit-button" class="btn-success hidden">
							{{ "candidate_form.register" | trans }}
						</button>
					</div>
					{{ form_end(form) }}
				</div>
			</div>
		</div>
	</div>

	<div id="help-modal" class="fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center hidden">
		<div class="bg-white rounded-lg p-8 max-w-2xl w-full">
			<h3 class="text-2xl font-bold mb-4">
				{{ "candidate_form.Help Guide" | trans }}
			</h3>
			<div class="space-y-4">
				<div>
					<h4 class="font-semibold">
						{{ "candidate_form.Help 1 Title" | trans }}
					</h4>
					<p>{{ "candidate_form.Help 1" | trans }}</p>
				</div>
				<div>
					<h4 class="font-semibold">
						{{ "candidate_form.Help 2 Title" | trans }}
					</h4>
					<p>{{ "candidate_form.Help 2" | trans }}</p>
				</div>
				<div>
					<h4 class="font-semibold">
						{{ "candidate_form.Help 3 Title" | trans }}
					</h4>
					<p>{{ "candidate_form.Help 3" | trans }}</p>
				</div>
				<div>
					<h4 class="font-semibold">
						{{ "candidate_form.Help 4 Title" | trans }}
					</h4>
					<p>{{ "candidate_form.Help 4" | trans }}</p>
				</div>
			</div>
			<button id="close-help" class="mt-6 btn-primary">
				{{ "candidate_form.Close" | trans }}
			</button>
		</div>
	</div>

	<script>
		var translations = {
stepMovedSuccess: "{{ 'candidate_form.step_moved_success'|trans({'%step%': '__STEP__'})|e('js') }}",
stepReturned: "{{ 'candidate_form.step_returned'|trans({'%step%': '__STEP__'})|e('js') }}"
};
	</script>

	<script>
		document.addEventListener('DOMContentLoaded', function () {
const form = document.getElementById('multi-step-form');
const steps = [
'step1',
'step2',
'step3',
'step4',
'step5',
'step6'
];
const nextButton = document.getElementById('next-button');
const prevButton = document.getElementById('prev-button');
const submitButton = document.getElementById('submit-button');
const saveButton = document.getElementById('save-button');
const step5Heading = document.getElementById('step5-heading');
const stepIndicators = steps.map(step => document.getElementById (`step-indicator-${
step.slice(-1)
}`));
const educationSubsystemSelect = document.querySelector('select[name$="[educationSubsystem]"]');
const francophonesFields = document.getElementById('francophone-fields');
const anglophoneFields = document.getElementById('anglophone-fields');
let currentStep = 0;

const transactionNumberInput = document.querySelector('input[name$="[transactionNumber]"]');
const paymentOperatorSelect = document.querySelector('select[name$="[paymentOperator]"]');

function updateButtonVisibility(stepIndex) {
prevButton.style.display = stepIndex === 0 ? 'none' : 'inline-block';
nextButton.style.display = stepIndex === steps.length - 1 ? 'none' : 'inline-block';
submitButton.style.display = stepIndex === steps.length - 1 ? 'inline-block' : 'none';
}

function validateTransactionNumber(transactionNumber, operator) {
switch (operator) {
case 'ORANGE MONEY':
return /^(MP|CI)\d{6}\.\d{4}\.[A-Z]\d{5}$/.test(transactionNumber);
case 'MTN MOBILE MONEY':
return /^\d{10}$/.test(transactionNumber);
default:
return false;
}
}

function showError(input, message) {
input.classList.add('border-red-500');
let errorMessage = input.parentNode.querySelector('.text-red-500');
if (! errorMessage) {
errorMessage = document.createElement('p');
errorMessage.classList.add('text-red-500', 'text-xs', 'mt-1');
input.parentNode.appendChild(errorMessage);
}
errorMessage.textContent = message;
}

function clearError(input) {
input.classList.remove('border-red-500');
const errorMessage = input.parentNode.querySelector('.text-red-500');
if (errorMessage) {
errorMessage.remove();
}
}

function validateStep(stepIndex) {
const stepElement = document.getElementById(steps[stepIndex]);
const inputs = stepElement.querySelectorAll('input, select');
let isValid = true;

inputs.forEach(input => {
if (input.hasAttribute('required') && !input.value.trim()) {
isValid = false;
showError(input, errorMessages.required);
} else {
clearError(input);
}
});

if (stepIndex === 0) {
const isValidTransaction = validateTransactionNumber(transactionNumberInput.value, paymentOperatorSelect.value);
if (! isValidTransaction) {
isValid = false;
showError(transactionNumberInput, 'Le format du numéro de transaction est invalide');
} else {
clearError(transactionNumberInput);
}
}

if (stepIndex === 3 && educationSubsystemSelect.value === '-') {
isValid = false;
showPopup('error', 'Veuillez choisir un sous-système éducatif');
}

return isValid;
}

function showStep(stepIndex) {
steps.forEach((step, index) => {
document.getElementById(step).style.display = index === stepIndex ? 'block' : 'none';
stepIndicators[index].classList.toggle('active', index === stepIndex);
stepIndicators[index].classList.toggle('completed', index < stepIndex);
});
updateButtonVisibility(stepIndex);
}

function showPopup(type, message) {
  const popup = document.getElementById('popup');
  const popupMessage = document.getElementById('popup-message');
  const popupIcon = document.getElementById('popup-icon');

  popupMessage.textContent = message;
  popup.classList.remove('bg-red-100', 'border-red-400', 'text-red-700', 'bg-green-100', 'border-green-400', 'text-green-700');

  if (type === 'error') {
    popup.classList.add('bg-red-100', 'border-red-400', 'text-red-700');
    popupIcon.innerHTML = '<svg class="h-6 w-6 text-red-600" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" /></svg>';
  } else {
    popup.classList.add('bg-green-100', 'border-green-400', 'text-green-700');
    popupIcon.innerHTML = '<svg class="h-6 w-6 text-green-600" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>';
  }

  // Show the popup
  popup.style.transform = 'translateY(0)';

  // Hide the popup after 3 seconds
  setTimeout(() => {
    popup.style.transform = 'translateY(-100%)';
  }, 3000);
}

// Add event listener for the close button
document.getElementById('close-popup').addEventListener('click', () => {
  document.getElementById('popup').style.transform = 'translateY(-100%)';
});

// Initialize the popup system
document.addEventListener('DOMContentLoaded', () => {
  const popup = document.getElementById('popup');
  popup.style.transition = 'transform 0.3s ease-in-out';
});

function fillFieldsWithPlaceholder(container, placeholder) {
const inputs = container.querySelectorAll('input, select');
inputs.forEach(input => {
if (input.tagName === 'SELECT') {
const placeholderOption = document.createElement('option');
placeholderOption.value = placeholder;
placeholderOption.text = placeholder;
placeholderOption.selected = true;
input.appendChild(placeholderOption);
} else {
input.value = placeholder;
}
});
}

async function saveFormData() {
const formData = new FormData(form);
const formObject = {};
formData.forEach((value, key) => {
formObject[key] = value;
});

try {
const response = await fetch('{{ path('app_candidate_save_progress') }}', {
method: 'POST',
headers: {
'Content-Type': 'application/json'
},
body: JSON.stringify(formObject)
});

if (response.ok) {
const result = await response.json();
if (result.success) {
showPopup('success', 'Progrès sauvegardé avec succès !');
} else {
showPopup('error', 'Erreur lors de la sauvegarde : ' + (
result.message || 'Veuillez réessayer.'
));
}
} else {
showPopup('error', 'Erreur lors de la sauvegarde. Statut : ' + response.status);
}
} catch (error) {
console.error('Erreur:', error);
showPopup('error', 'Une erreur inattendue s\'est produite. Veuillez réessayer.');
}
}

function submitForm() {
if (validateStep(currentStep)) {
const formData = new FormData(form);
const formObject = {};
formData.forEach((value, key) => {
formObject[key] = value;
});
sessionStorage.setItem('candidateFormData', JSON.stringify(formObject));
form.submit();
} else {
showPopup('error', 'Veuillez corriger les erreurs avant de soumettre le formulaire.');
}
}

nextButton.addEventListener('click', function () {
if (validateStep(currentStep)) {
if (currentStep < steps.length - 1) {
currentStep++;
showStep(currentStep);
saveFormData();
} else {
submitForm();
}
} else {
showPopup('error', 'Veuillez remplir tous les champs requis correctement.');
}
});

prevButton.addEventListener('click', function () {
if (currentStep > 0) {
currentStep--;
showStep(currentStep);
}
});

saveButton.addEventListener('click', saveFormData);

submitButton.addEventListener('click', function (e) {
e.preventDefault();
submitForm();
});

educationSubsystemSelect.addEventListener('change', function () {
let headingText = '{{ 'candidate_form.step3_title.Étape 4' | trans }}';
if (this.value === 'FRANCOPHONE') {
headingText += ' -    {{ 'candidate_form.step3_title.Étape 5' | trans }}';
francophonesFields.classList.remove('hidden');
anglophoneFields.classList.add('hidden');
fillFieldsWithPlaceholder(anglophoneFields, '-');
} else if (this.value === 'ANGLOPHONE') {
headingText += ' -    {{ 'candidate_form.step3_title.Étape 5.1' | trans }}';
francophonesFields.classList.add('hidden');
anglophoneFields.classList.remove('hidden');
fillFieldsWithPlaceholder(francophonesFields, '-');
}
step5Heading.textContent = headingText;
});

// Validation en temps réel pour le numéro de transaction
transactionNumberInput.addEventListener('input', function () {
const isValid = validateTransactionNumber(this.value, paymentOperatorSelect.value);
if (isValid) {
clearError(this);
} else {
showError(this, 'Le format du numéro de transaction est invalide');
}
});

// Revalidation du numéro de transaction lors du changement d'opérateur
paymentOperatorSelect.addEventListener('change', function () {
if (transactionNumberInput.value) {
const isValid = validateTransactionNumber(transactionNumberInput.value, this.value);
if (isValid) {
clearError(transactionNumberInput);
} else {
showError(transactionNumberInput, 'Le format du numéro de transaction est invalide');
}
}
});

// Initialisation du formulaire
showStep(currentStep);

// Chargement des données sauvegardées
fetch('{{ path('app_candidate_load_progress') }}').then(response => response.json()).then(data => {
if (data.success && data.formData) {
Object.keys(data.formData).forEach(key => {
const input = form.querySelector (`[name="${key}"]`);
if (input) {
input.value = data.formData[key];
}
});
console.log('Données sauvegardées chargées avec succès');
}
}).catch(error => {
console.error('Erreur lors du chargement des données sauvegardées:', error);
});

// Gestion du téléchargement d'images
function handleImageUpload(input, previewId) {
input.addEventListener('change', function () {
const file = this.files[0];
if (file) {
const reader = new FileReader();
reader.onload = function (e) {
const preview = document.getElementById(previewId);
preview.src = e.target.result;
preview.style.display = 'block';
}
reader.readAsDataURL(file);
}
});
}

handleImageUpload(document.querySelector('input[name$="[photo]"]'), 'photo-preview');
handleImageUpload(document.querySelector('input[name$="[birthCertificate]"]'), 'birthCertificate-preview');
handleImageUpload(document.querySelector('input[name$="[certificate]"]'), 'certificate-preview');

// Fonctionnalité de la modal d'aide
const helpButton = document.getElementById('help-button');
const helpModal = document.getElementById('help-modal');
const closeModal = document.getElementById('close-help');

function openModal() {
helpModal.classList.remove('hidden');
document.body.style.overflow = 'hidden';
}

function closeModalFunction() {
helpModal.classList.add('hidden');
document.body.style.overflow = '';
}

helpButton.addEventListener('click', openModal);
closeModal.addEventListener('click', closeModalFunction);

window.addEventListener('click', (event) => {
if (event.target === helpModal) {
closeModalFunction();
}
});

document.addEventListener('keydown', (event) => {
if (event.key === 'Escape' && ! helpModal.classList.contains('hidden')) {
closeModalFunction();
}
});
});
	</script>

	<script>
		$(document).ready(function () {
$(".js-datepicker").datepicker({
dateFormat: "dd/mm/yy",
changeMonth: true,
changeYear: true,
yearRange: "1992:c",
maxDate: "0",
showOtherMonths: true,
selectOtherMonths: true,
beforeShow: function (input, inst) {
setTimeout(function () {
var inputOffset = $(input).offset();
var windowHeight = $(window).height();
var calendarHeight = inst.dpDiv.outerHeight();

if (inputOffset.top + calendarHeight > windowHeight) {
inst.dpDiv.css({
top: inputOffset.top - calendarHeight - $(input).outerHeight() + "px"
});
}
}, 0);
}
});
});
	</script>

	<script>
		document.addEventListener("DOMContentLoaded", function () {
const startYearSelect = document.querySelector('[data-year-field="secondaryEducationStartYear"]');
const endYearSelect = document.querySelector('[data-year-field="secondaryEducationEndYear"]');
const errorMessage = document.getElementById("year-gap-error");

function updateYearOptions() {
const startYear = parseInt(startYearSelect.value);
const minEndYear = startYear + 5;

// Clear existing options
endYearSelect.innerHTML = "";

// Add new options
for (let year = minEndYear; year <= 2024; year++) {
const option = new Option(year, year);
endYearSelect.add(option);
}

// If previously selected end year is still valid, select it
if (endYearSelect.querySelector (`option[value="${
endYearSelect.dataset.previousValue
}"]`)) {
endYearSelect.value = endYearSelect.dataset.previousValue;
}

validateYearGap();
}

function validateYearGap() {
const startYear = parseInt(startYearSelect.value);
const endYear = parseInt(endYearSelect.value);

if (endYear - startYear < 4) {
errorMessage.style.display = "block";
endYearSelect.setCustomValidity("Invalid year gap");
} else {
errorMessage.style.display = "none";
endYearSelect.setCustomValidity("");
}
}

startYearSelect.addEventListener("change", updateYearOptions);
endYearSelect.addEventListener("change", function () {
this.dataset.previousValue = this.value;
validateYearGap();
});

// Initial setup
updateYearOptions();
});
	</script>
{% endblock %}
